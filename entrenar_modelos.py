"""
Script para entrenar modelos predictivos avanzados para partidos futuros.
Incluye t√©cnicas avanzadas como XGBoost, stacking y optimizaci√≥n de hiperpar√°metros.
"""

import os
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from datetime import datetime
import argparse
import joblib

from analisis.futuro import AnalisisFuturo
from utils.data_loader import DataLoader

def main():
    # Configurar argumentos de l√≠nea de comandos
    parser = argparse.ArgumentParser(description='Entrenamiento de modelos predictivos para f√∫tbol')
    parser.add_argument('--optimizar', action='store_true', help='Realizar optimizaci√≥n de hiperpar√°metros')
    parser.add_argument('--visualizar', action='store_true', help='Generar visualizaciones de importancia de caracter√≠sticas')
    parser.add_argument('--generar-datos', action='store_true', help='Generar datos sint√©ticos para entrenamiento')
    parser.add_argument('--evaluar', action='store_true', help='Evaluar modelos despu√©s del entrenamiento')
    args = parser.parse_args()
    
    print("=" * 60)
    print("ENTRENAMIENTO DE MODELOS PREDICTIVOS AVANZADOS PARA F√öTBOL")
    print("=" * 60)
    
    # Inicializar el analizador y el cargador de datos
    analizador = AnalisisFuturo()
    data_loader = DataLoader()
    
    # Verificar si existen datos hist√≥ricos
    ruta_datos = os.path.join('cache', 'partidos_historicos.csv')
    
    if os.path.exists(ruta_datos) and not args.generar_datos:
        print(f"Cargando datos hist√≥ricos desde {ruta_datos}...")
        datos = data_loader.cargar_datos_csv(ruta_datos)
    else:
        print("No se encontraron datos hist√≥ricos o se solicit√≥ generaci√≥n. Generando datos de ejemplo...")
        datos = analizador.generar_datos_ejemplo()
    
    if datos is None or datos.empty:
        print("Error: No se pudieron obtener datos para el entrenamiento.")
        return
    
    print(f"Se cargaron {len(datos)} partidos para entrenamiento.")
    
    # Cargar los datos en el analizador
    analizador.datos = datos
    
    # Entrenar modelos con b√∫squeda de hiperpar√°metros (si se solicita)
    busqueda_hiperparametros = args.optimizar
    if busqueda_hiperparametros:
        print("\nüîç Se realizar√° optimizaci√≥n de hiperpar√°metros (esto puede tardar varios minutos)...")
    else:
        print("\nüîß Se utilizar√°n modelos ensemble con par√°metros predeterminados...")
    
    print("\nüîÑ Iniciando entrenamiento de modelos...")
    analizador.entrenar_modelos(busqueda_hiperparametros=busqueda_hiperparametros)
    
    # Analizar importancia de caracter√≠sticas
    print("\nüìä Analizando importancia de caracter√≠sticas...")
    
    # Depuraci√≥n - Verificar feature_names
    if hasattr(analizador, 'feature_names'):
        if analizador.feature_names is None:
            print("No hay nombres de caracter√≠sticas disponibles")
        else:
            print(f"Nombres de caracter√≠sticas disponibles: {len(analizador.feature_names)}")
            # Verificar si la dimensi√≥n coincide con las caracter√≠sticas usadas para entrenar
            if len(analizador.feature_names) != 77:
                print(f"ADVERTENCIA: Las dimensiones de feature_names ({len(analizador.feature_names)}) no coinciden con las caracter√≠sticas reportadas (77)")
            # Intentar cargar nombres de caracter√≠sticas desde archivo
            try:
                feature_path = os.path.join('data', 'modelos', 'feature_names.txt')
                if os.path.exists(feature_path):
                    with open(feature_path, 'r') as f:
                        analizador.feature_names = [line.strip() for line in f.readlines()]
                    print(f"Nombres de caracter√≠sticas cargados desde archivo: {len(analizador.feature_names)}")
            except Exception as e:
                print(f"Error al cargar nombres de caracter√≠sticas: {e}")
    else:
        print("El analizador no tiene atributo feature_names")
        
    importancia = analizador.analizar_importancia_caracteristicas()
    
    # Guardar resultados de importancia
    if importancia:
        importancia_dir = os.path.join('data', 'importancia')
        os.makedirs(importancia_dir, exist_ok=True)
        
        for modelo, df in importancia.items():
            if isinstance(df, pd.DataFrame):
                ruta_csv = os.path.join(importancia_dir, f'importancia_{modelo}.csv')
                df.to_csv(ruta_csv, index=False)
                print(f"Resultados de importancia guardados en {ruta_csv}")
    
    # Realizar evaluaci√≥n si se solicita
    if args.evaluar:
        print("\nüß™ Realizando evaluaci√≥n de modelos con datos de prueba...")
        # Cargamos los modelos para asegurarnos de evaluar los modelos guardados
        analizador.cargar_modelos()
        
        # Realizamos predicciones de ejemplo
        equipos = datos['equipo_local'].unique()
        
        if len(equipos) >= 4:
            # Evaluamos con varias combinaciones de equipos
            pares_equipos = [
                (equipos[0], equipos[1]),
                (equipos[2], equipos[3]),
                (equipos[1], equipos[0])  # Invertimos para probar diferentes roles
            ]
        else:
            pares_equipos = [
                ("FC Barcelona", "Real Madrid"),
                ("Atl√©tico Madrid", "Sevilla FC")
            ]
        
        # Diferentes fechas para probar
        fechas = [
            datetime(2025, 10, 15),  # Temporada regular
            datetime(2025, 5, 20),   # Final de temporada
            datetime(2025, 12, 24)   # Per√≠odo navide√±o
        ]
        
        # Realizar predicciones para diferentes combinaciones
        print("\nPredicciones de ejemplo:")
        
        for equipo_local, equipo_visitante in pares_equipos:
            for fecha in fechas[:1]:  # Limitamos a una fecha por brevedad
                prediccion = analizador.predecir_partido_futuro(equipo_local, equipo_visitante, fecha)
                
                if prediccion:
                    print(f"\nüìù Predicci√≥n para {equipo_local} vs {equipo_visitante} ({fecha.strftime('%Y-%m-%d')}):")
                    print(f"   Resultado m√°s probable: {prediccion['resultado_predicho']}")
                    print(f"   Probabilidades: Victoria local: {prediccion['probabilidades']['victoria_local']:.1%}, "
                        f"Empate: {prediccion['probabilidades']['empate']:.1%}, "
                        f"Victoria visitante: {prediccion['probabilidades']['victoria_visitante']:.1%}")
                    print(f"   Goles predichos: {prediccion['goles_predichos']['local']} - {prediccion['goles_predichos']['visitante']}")
                    print("   Factores clave:")
                    for factor in prediccion['factores_clave']:
                        print(f"   - {factor}")
    
    print("\n‚úÖ Entrenamiento y evaluaci√≥n completados.")
    print("üîê Los modelos han sido guardados y est√°n listos para su uso.")

if __name__ == "__main__":
    try:
        main()
    except Exception as e:
        print(f"Error durante el entrenamiento: {e}")
        import traceback
        traceback.print_exc()
