"""
Script de depuraci√≥n para la aplicaci√≥n Flask.

Este script inicia la aplicaci√≥n en modo debug con configuraciones
espec√≠ficas para facilitar la depuraci√≥n de errores.
"""

import os
import sys
import logging
from werkzeug.serving import run_simple

# Configurar logging
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler(os.path.join('logs', 'debug.log'))
    ]
)

# Asegurarse de que exista el directorio de logs
os.makedirs('logs', exist_ok=True)

# Importar la aplicaci√≥n despu√©s de configurar el logging
try:
    from app import app
    print("‚úÖ Aplicaci√≥n importada correctamente")
except Exception as e:
    print(f"‚ùå Error al importar la aplicaci√≥n: {e}")
    sys.exit(1)

def main():
    """Funci√≥n principal para ejecutar la aplicaci√≥n en modo depuraci√≥n"""
    try:
        # Verificar si hay errores comunes
        check_common_issues()
        
        # Configurar la aplicaci√≥n para depuraci√≥n
        app.config['DEBUG'] = True
        app.config['TEMPLATES_AUTO_RELOAD'] = True
        app.jinja_env.auto_reload = True
        
        # A√±adir funciones a Jinja
        setup_jinja_env()
        
        host = '127.0.0.1'
        port = 5000
        
        print(f"\nüìä Iniciando servidor de depuraci√≥n en http://{host}:{port}")
        print("üîç Modo de depuraci√≥n: ACTIVADO")
        print("üîÑ Recarga autom√°tica: ACTIVADA")
        print("‚ö†Ô∏è Presiona CTRL+C para detener\n")
        
        # Ejecutar la aplicaci√≥n
        run_simple(
            hostname=host,
            port=port,
            application=app,
            use_reloader=True,
            use_debugger=True,
            use_evalex=True
        )
        
    except KeyboardInterrupt:
        print("\nüëã Servidor detenido por el usuario")
    except Exception as e:
        print(f"\n‚ùå Error al iniciar el servidor: {e}")
        logging.error(f"Error al iniciar el servidor: {e}", exc_info=True)

def check_common_issues():
    """Verifica problemas comunes que podr√≠an causar errores"""
    # Verificar que existen las plantillas
    templates_dir = os.path.join(os.path.dirname(__file__), 'templates')
    if not os.path.exists(templates_dir):
        print(f"‚ùå El directorio de plantillas no existe: {templates_dir}")
    else:
        print(f"‚úÖ Directorio de plantillas encontrado: {templates_dir}")
        
        # Verificar archivos de plantilla espec√≠ficos
        for template in ['base.html', 'index.html', 'explorar_db.html']:
            template_path = os.path.join(templates_dir, template)
            if not os.path.exists(template_path):
                print(f"‚ö†Ô∏è Plantilla no encontrada: {template}")
            else:
                print(f"‚úÖ Plantilla encontrada: {template}")
    
    # Verificar directorio de base de datos
    db_dir = os.path.join(os.path.dirname(__file__), 'data', 'database')
    if not os.path.exists(db_dir):
        print(f"‚ö†Ô∏è El directorio de base de datos no existe: {db_dir}")
        print("   Se crear√° autom√°ticamente al acceder a la base de datos.")
    
    # Verificar archivo .env
    env_path = os.path.join(os.path.dirname(__file__), '.env')
    if not os.path.exists(env_path):
        print(f"‚ö†Ô∏è Archivo .env no encontrado: {env_path}")

def setup_jinja_env():
    """Configura el entorno Jinja2 para a√±adir funciones √∫tiles"""
    # A√±adir funciones globales a Jinja
    app.jinja_env.globals.update(max=max)
    app.jinja_env.globals.update(min=min)
    app.jinja_env.globals.update(len=len)
    app.jinja_env.globals.update(enumerate=enumerate)
    app.jinja_env.globals.update(zip=zip)
    app.jinja_env.globals.update(list=list)
    app.jinja_env.globals.update(dict=dict)
    app.jinja_env.globals.update(str=str)
    app.jinja_env.globals.update(int=int)
    app.jinja_env.globals.update(float=float)
    
    print("‚úÖ Funciones globales a√±adidas al entorno Jinja")

if __name__ == "__main__":
    main()
